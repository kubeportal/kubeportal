# Generated by Django 2.2.10 on 2020-02-18 17:30

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import django_fsm
import uuid


class Migration(migrations.Migration):

    replaces = [('kubeportal', '0001_initial'), ('kubeportal', '0002_auto_20190301_1359'), ('kubeportal', '0003_user_state'), ('kubeportal', '0004_user_approval_id'), ('kubeportal', '0005_auto_20190813_0617'), ('kubeportal', '0006_auto_20190813_0743'), ('kubeportal', '0007_auto_20190917_0605'), ('kubeportal', '0008_user_comments'), ('kubeportal', '0009_auto_20200218_1434')]

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='KubernetesNamespace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name', or '123-abc').", max_length=100)),
                ('uid', models.CharField(editable=False, max_length=50, null=True)),
                ('visible', models.BooleanField(default=True, help_text='Visibility in admin interface. Can only be configured by a superuser.')),
            ],
        ),
        migrations.CreateModel(
            name='KubernetesServiceAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name', or '123-abc').", max_length=100)),
                ('uid', models.CharField(editable=False, max_length=50, null=True)),
                ('namespace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kubeportal.KubernetesNamespace')),
            ],
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="You can use the placeholders '{{namespace}}' and '{{serviceaccount}}' in the title.", max_length=100)),
                ('url', models.URLField(help_text="You can use the placeholders '{{namespace}}' and '{{serviceaccount}}' in the URL.")),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('service_account', models.ForeignKey(blank=True, help_text='Kubernetes namespace + service account of this user.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='kubeportal.KubernetesServiceAccount', verbose_name='Kubernetes account')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
                ('state', django_fsm.FSMField(choices=[('not requested', 'not requested'), ('requested', 'requested'), ('rejected', 'rejected'), ('approved', 'approved')], default='not requested', help_text='The state of the cluster access approval workflow.', max_length=50, verbose_name='Cluster access')),
                ('approval_id', models.UUIDField(default=uuid.uuid4, editable=False, null=True)),
                ('answered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Approved by')),
                ('comments', models.CharField(blank=True, default='', help_text='Description on why this user needs cluster access. (150 characters)', max_length=150, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
